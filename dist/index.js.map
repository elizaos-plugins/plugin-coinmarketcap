{"version":3,"sources":["../src/actions/getPrice/index.ts","../src/environment.ts","../src/actions/getPrice/examples.ts","../src/actions/getPrice/service.ts","../src/actions/getPrice/template.ts","../src/actions/getPrice/validation.ts","../src/index.ts"],"sourcesContent":["import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { validateCoinMarketCapConfig } from \"../../environment\";\nimport { priceExamples } from \"./examples\";\nimport { createPriceService } from \"./service\";\nimport { getPriceTemplate } from \"./template\";\nimport type { GetPriceContent } from \"./types\";\nimport { isGetPriceContent } from \"./validation\";\n\nexport default {\n    name: \"GET_PRICE\",\n    similes: [\n        \"CHECK_PRICE\",\n        \"PRICE_CHECK\",\n        \"GET_CRYPTO_PRICE\",\n        \"CHECK_CRYPTO_PRICE\",\n        \"GET_TOKEN_PRICE\",\n        \"CHECK_TOKEN_PRICE\",\n    ],\n    // eslint-disable-next-line\n    validate: async (runtime: IAgentRuntime, _message: Memory) => {\n        await validateCoinMarketCapConfig(runtime);\n        return true;\n    },\n    description: \"Get the current price of a cryptocurrency from CoinMarketCap\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting CoinMarketCap GET_PRICE handler...\");\n\n        // Initialize or update state\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n\n        try {\n            // Compose and generate price check content\n            const priceContext = composeContext({\n                state: currentState,\n                template: getPriceTemplate,\n            });\n\n            const content = (await generateObjectDeprecated({\n                runtime,\n                context: priceContext,\n                modelClass: ModelClass.SMALL,\n            })) as unknown as GetPriceContent;\n\n            // Validate content\n            if (!isGetPriceContent(content)) {\n                throw new Error(\"Invalid price check content\");\n            }\n\n            // Get price from CoinMarketCap\n            const config = await validateCoinMarketCapConfig(runtime);\n\n            const priceService = createPriceService(\n                config.COINMARKETCAP_API_KEY\n            );\n\n            try {\n                const priceData = await priceService.getPrice(\n                    content.symbol,\n                    content.currency\n                );\n                elizaLogger.success(\n                    `Price retrieved successfully! ${content.symbol}: ${priceData.price} ${content.currency.toUpperCase()}`\n                );\n\n                if (callback) {\n                    callback({\n                        text: `The current price of ${content.symbol} is ${priceData.price} ${content.currency.toUpperCase()}`,\n                        content: {\n                            symbol: content.symbol,\n                            currency: content.currency,\n                            ...priceData,\n                        },\n                    });\n                }\n\n                return true;\n            } catch (error) {\n                elizaLogger.error(\"Error in GET_PRICE handler:\", error);\n                if (callback) {\n                    callback({\n                        text: `Error fetching price: ${error.message}`,\n                        content: { error: error.message },\n                    });\n                }\n                return false;\n            }\n        } catch (error) {\n            elizaLogger.error(\"Error in GET_PRICE handler:\", error);\n            if (callback) {\n                callback({\n                    text: `Error fetching price: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    examples: priceExamples,\n} as Action;\n","import type { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const coinmarketcapEnvSchema = z.object({\n    COINMARKETCAP_API_KEY: z\n        .string()\n        .min(1, \"CoinMarketCap API key is required\"),\n});\n\nexport type CoinMarketCapConfig = z.infer<typeof coinmarketcapEnvSchema>;\n\nexport async function validateCoinMarketCapConfig(\n    runtime: IAgentRuntime\n): Promise<CoinMarketCapConfig> {\n    try {\n        const config = {\n            COINMARKETCAP_API_KEY: runtime.getSetting(\"COINMARKETCAP_API_KEY\"),\n        };\n\n        return coinmarketcapEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `CoinMarketCap configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import type { ActionExample } from \"@elizaos/core\";\n\nexport const priceExamples: ActionExample[][] = [\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"What's the current price of Bitcoin?\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"Let me check the current Bitcoin price for you.\",\n                action: \"GET_PRICE\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"The current price of BTC is 65,432.21 USD\",\n            },\n        },\n    ],\n    [\n        {\n            user: \"{{user1}}\",\n            content: {\n                text: \"Check ETH price in EUR\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"I'll check the current Ethereum price in EUR.\",\n                action: \"GET_PRICE\",\n            },\n        },\n        {\n            user: \"{{agent}}\",\n            content: {\n                text: \"The current price of ETH is 2,345.67 EUR\",\n            },\n        },\n    ],\n];\n","import axios from \"axios\";\nimport type { ApiResponse, PriceData } from \"./types\";\n\nconst BASE_URL = \"https://pro-api.coinmarketcap.com/v1\";\n\nexport const createPriceService = (apiKey: string) => {\n    const client = axios.create({\n        baseURL: BASE_URL,\n        headers: {\n            \"X-CMC_PRO_API_KEY\": apiKey,\n            Accept: \"application/json\",\n        },\n    });\n\n    const getPrice = async (\n        symbol: string,\n        currency: string\n    ): Promise<PriceData> => {\n        const normalizedSymbol = symbol.toUpperCase().trim();\n        const normalizedCurrency = currency.toUpperCase().trim();\n\n        try {\n            const response = await client.get<ApiResponse>(\n                \"/cryptocurrency/quotes/latest\",\n                {\n                    params: {\n                        symbol: normalizedSymbol,\n                        convert: normalizedCurrency,\n                    },\n                }\n            );\n\n            console.log(\n                \"API Response:\",\n                JSON.stringify(response.data, null, 2)\n            );\n\n            const symbolData = response.data.data[normalizedSymbol];\n            if (!symbolData) {\n                throw new Error(\n                    `No data found for symbol: ${normalizedSymbol}`\n                );\n            }\n\n            const quoteData = symbolData.quote[normalizedCurrency];\n            if (!quoteData) {\n                throw new Error(\n                    `No quote data found for currency: ${normalizedCurrency}`\n                );\n            }\n\n            return {\n                price: quoteData.price,\n                marketCap: quoteData.market_cap,\n                volume24h: quoteData.volume_24h,\n                percentChange24h: quoteData.percent_change_24h,\n            };\n        } catch (error) {\n            if (axios.isAxiosError(error)) {\n                const errorMessage =\n                    error.response?.data?.status?.error_message ||\n                    error.message;\n                console.error(\"API Error:\", errorMessage);\n                throw new Error(`API Error: ${errorMessage}`);\n            }\n            throw error;\n        }\n    };\n\n    return { getPrice };\n};\n","export const getPriceTemplate = `Respond with a JSON object containing BOTH symbol and currency. Currency must default to \"USD\" if not specified.\n\nHere are the cryptocurrency symbol mappings:\n- bitcoin/btc -> BTC\n- ethereum/eth -> ETH\n- solana/sol -> SOL\n- cardano/ada -> ADA\n- ripple/xrp -> XRP\n- dogecoin/doge -> DOGE\n- polkadot/dot -> DOT\n- usdc -> USDC\n- tether/usdt -> USDT\n\nIMPORTANT: Response must ALWAYS include both \"symbol\" and \"currency\" fields.\n\nExample response:\n\\`\\`\\`json\n{\n    \"symbol\": \"BTC\",\n    \"currency\": \"USD\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nExtract the cryptocurrency from the most recent message. Always include currency (default \"USD\").\nRespond with a JSON markdown block containing both symbol and currency.`;\n","import { z } from \"zod\";\nimport type { GetPriceContent } from \"./types\";\n\nexport const GetPriceSchema = z.object({\n    symbol: z.string(),\n    currency: z.string().default(\"USD\"),\n});\n\nexport function isGetPriceContent(\n    content: GetPriceContent\n): content is GetPriceContent {\n    return (\n        typeof content.symbol === \"string\" &&\n        typeof content.currency === \"string\"\n    );\n}\n","import type { Plugin } from \"@elizaos/core\";\nimport getPrice from \"./actions/getPrice\";\n\nexport const coinmarketcapPlugin: Plugin = {\n    name: \"coinmarketcap\",\n    description: \"CoinMarketCap Plugin for Eliza\",\n    actions: [getPrice],\n    evaluators: [],\n    providers: [],\n};\n\nexport default coinmarketcapPlugin;\n"],"mappings":"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","names":["z"]}